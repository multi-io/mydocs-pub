;; -*- sawfish-interaction -*-
;; This buffer is for interacting with the sawfish window manager.

(+ 1 1)
2


(get-color "red")
#<color #ffff00000000>

(get-font "-urw-urw palladio l-regular-r-normal--22-160-75-100-p-90-iso8859-2")
#<font xlfd:-urw-urw palladio l-regular-r-normal--22-160-75-100-p-90-iso8859-2>


***
***






(copy-list match-window-profile)
***

(sdfgd)
***


(setq bla 42)
42

bla
42

(setq my-img (make-image "/usr/share/sawfish/1.3/themes/Crux/active:left-top-border-shaped.png"))
#<image 4x19>


(get 'arrow 'cursor-shape)
2


(get-font "cursor")
#<font xlfd:cursor>


(managed-windows)
(#<window e00042> #<window e0008a> #<window 1000042> #<window 1c00010> #<window 1e00010> #<window 2000010> #<window 2400010> #<window 2800003> #<window 2a0001a> #<window 2a00034> #<window 2c00025> #<window 2e00003> #<window 3000010> #<window 3200010> #<window 3400010> #<window 3600036> #<window 221d592> #<window 221d9bc> #<window 221ddcf> #<window 221e5f5> #<window 221e9fc> #<window 221ee0f> #<window 3800010> #<window 3a00472> #<window 2353f89> #<window 23663b6> #<window 236eb45> #<window 2371ab7> #<window 2375edb>)


(setq my-wnd (get-window-by-name "xload_test"))
#<window 3c00014>




(let ((my-wnd (car (managed-windows))))
  (mapcar (lambda (propkey)
            (get-x-property my-wnd propkey))
          (list-x-properties my-wnd)))




(customize)
***
***








  



(window-get my-wnd 'workspaces)
(0)

nil

(window-name my-wnd)
"xload_test"

(window-full-name my-wnd)
"xload_test"

(window-id my-wnd)
62914580

(window-position my-wnd)
(8 . 8)


(window-dimensions my-wnd)
(120 . 137)

(window-size-hints my-wnd)
((window-gravity . north-west)
 (program-size . t))

(window-visibility my-wnd)
fully-obscured
unobscured
partially-obscured


(list-x-properties my-wnd)
(SM_CLIENT_ID WM_PROTOCOLS WM_STATE _WIN_AREA _WIN_WORKSPACE _NET_WM_DESKTOP _WIN_STATE _NET_WM_STATE WM_CLIENT_LEADER WM_LOCALE_NAME WM_CLASS WM_HINTS WM_NORMAL_HINTS WM_CLIENT_MACHINE WM_COMMAND WM_ICON_NAME WM_NAME)


(mapcar (lambda (propkey)
          (get-x-property my-wnd propkey))
        (list-x-properties my-wnd))



(mapcar (lambda (propkey)
          (get-x-property my-wnd propkey))
        (list-x-properties my-wnd))

(get-x-property my-wnd 'WM_NAME)
(STRING 8 "xload_test")


(mapcar (lambda (propkey)
          (gett-x-property my-wnd propkey)
          )
        (list-x-properties my-wnd))













(print "hello")
"hello"


(format nil "hello")
"hello"


(get-x-property my-wnd '_WIN_STATE)
(CARDINAL 32 [0])


(get-x-property my-wnd (nth 2 (list-x-properties my-wnd)))
(WM_STATE 32 [1 0])


match-window-profile
((((WM_NAME . "^xload_tick$"))
  (position 9960 . 0)
  (frame-type . normal)
  (sticky . t)
  (window-list-skip . t)))




(stacking-order)
(#<window 2c00025> #<window 2400010> #<window 3c00014> #<window 3200010> #<window 3600036> #<window 2398753> #<window 3800010> #<window e00042> #<window e0008a> #<window 2000010> #<window 236eb45> #<window 1000042> #<window 2375edb> #<window 23663b6> #<window 2a00034> #<window 2a0001a> #<window 3000010> #<window 2371ab7> #<window 2353f89> #<window 221ee0f> #<window 221e9fc> #<window 3400010> #<window 1e00010> #<window 221e5f5> #<window 221ddcf> #<window 221d9bc> #<window 221d592> #<window 1c00010> #<window 2e00003> #<window 2800003>)

(setq my-topmostwnd (car (stacking-order)))
#<window 2c00025>

(window-name my-topmostwnd)
"emacs: *sawfish-scratch*"


(x-raise-window my-wnd)
#<window 3c00014>




(stacking-order-by-depth 0)
(#<window 2c00025> #<window 2400010> #<window 3c00014> #<window 3200010> #<window 3600036> #<window 2398753> #<window 3800010> #<window e00042> #<window e0008a> #<window 2000010> #<window 236eb45> #<window 1000042> #<window 2375edb> #<window 23663b6> #<window 2a00034> #<window 2a0001a> #<window 3000010> #<window 2371ab7> #<window 2353f89> #<window 221ee0f> #<window 221e9fc> #<window 3400010> #<window 1e00010> #<window 221e5f5> #<window 221ddcf> #<window 221d9bc> #<window 221d592> #<window 1c00010> #<window 2e00003> #<window 2800003>)

(stacking-order-by-depth 1)
nil



0x23c6f7e
rep:


(= "bla" "bla")
t
t

(mapcar window-name
        (managed-windows))
("panel" "panel" "Ding: Dictionary Lookup" "x-terminal-emulator" "su" "x-terminal-emulator" "x-terminal-emulator" "XMMS - 21. Madonna - Like A Virgin (3:12)" "XMMS Playlist" "emacs: *sawfish-scratch*" "wmppp" "x-terminal-emulator" "x-terminal-emulator" "x-terminal-emulator" "PilotManager, v1.107" "Google Search: Palm Linux author:Lingnau - Galeon" "Google Suche: \"Palm III\" infrared - Galeon" "Google Suche: \"Palm III\" IrDA driver - Galeon" "Google Suche: \"Andrew Howlett\" Palm - Galeon" "..:: palm | spot ::.. - Explore More Software! - Galeon" "Vexed - Download.com - Free downloads, shareware, and more. - Galeon" "su" "Slashdot: News for nerds, stuff that matters - Galeon" "user2user (heise online user2user) - Galeon" "Getting Started with Stackless - Galeon" "starship.python.net Mailing Lists - Galeon" "Google Suche: Englisch Verniedlichungsform - Galeon" "xload_test" "Common Lisp HyperSpec (TM) - Galeon" "/cvs/gnome/sawfish/BUGS - Galeon" "StGB - Galeon" "Galeon : Settings : Proxy" "emacs: *info*")



(setq my-galeon-proxywnd (car (filter (lambda (window)
                                        (= "Galeon : Settings : Proxy"
                                           (window-name window)))
                                      (managed-windows))))
#<window 220061d>

#<window 23c6f7e>




my-galeon-proxywnd
#<window 220061d>

#<window 0>

#<window 0>




frame-part-classes
((bottom-right-corner (cursor . #<closure 80bb284>) (keymap . border-keymap)) (bottom-left-corner (cursor . #<closure 80bb298>) (keymap . border-keymap)) (top-right-corner (cursor . #<closure 80bb2ac>) (keymap . border-keymap)) (top-left-corner (cursor . #<closure 80bb2c0>) (keymap . border-keymap)) (right-border (cursor . #<closure 80bb2d4>) (keymap . border-keymap)) (left-border (cursor . #<closure 80bb2e8>) (keymap . border-keymap)) (bottom-border (cursor . #<closure 80bb2fc>) (keymap . border-keymap)) (top-border (cursor . #<closure 80bb39c>) (keymap . border-keymap)) (title (keymap . title-keymap) (cursor . #<closure 80bb3b0>)) (shade-button (keymap . shade-button-keymap)) (maximize-button (keymap . maximize-button-keymap)) (iconify-button (keymap . iconify-button-keymap)) (close-button (keymap . close-button-keymap)) (menu-button (keymap . menu-button-keymap)))

border-keymap
(keymap
 (resize-window-interactively 3 . 131328)
 (move-window-interactively 3 . 131584)
 (raise-lower-window 4 . 132096))


(eval (cdr (assoc 'keymap (assoc 'title frame-part-classes))))
(keymap
 (move-window-interactively 3 . 131328)
 (toggle-window-shaded 2 . 131328)
 (resize-window-interactively 3 . 131584)
 (popup-window-menu 4 . 132096))

title-keymap

(keymap . title-keymap)

(title (keymap . title-keymap) (cursor . #<closure 80bb3b0>))

override-frame-part-classes
((title
  (background "green" "red" "blue" "yellow")))

nil


(assoc 'title frame-part-classes)
(title (keymap . title-keymap) (cursor . #<closure 80bb3b0>))

(set-frame-part-value 'title 'background
                      '("green" "red" "blue" "yellow")
                      t)
((title
  (background "green" "red" "blue" "yellow")))


(setq override-frame-part-classes nil)
nil



(window-frame my-galeon-proxywnd)
(((background #<image 16x3> #<image 16x3>) (left-edge . -5) (top-edge . -22) (class . top-left-corner)) ((background #<image 16x3> #<image 16x3>) (left-edge . 11) (top-edge . -22) (width . #<closure top-border-left-width>) (class . top-border)) ((background #<image 16x3> #<image 16x3>) (left-edge . #<closure 80cf368>) (right-edge . 10) (top-edge . -22) (class . top-border)) ((background #<image 48x19> #<image 48x19>) (left-edge . -2) (width . #<closure 80cf354>) (top-edge . -19) (text . #<subr window-name>) (foreground "grey95" "white") (x-justify . #<closure horizontal-justification>) (y-justify . #<closure vertical-justification>) (class . title)) ((background #<image 48x19> #<image 48x19>) (left-edge . #<closure 80cf340>) (top-edge . -19) (class . title)) ((background #<image 48x19> #<image 48x19>) (left-edge . #<closure title-left-width>) (right-edge . -1) (top-edge . -19) (class . title)) ((background #<image 16x3> #<image 16x3>) (right-edge . -6) (top-edge . -22) (class . top-right-corner)) ((background #<image 4x19> #<image 4x19>) (left-edge . -5) (top-edge . -19) (class . top-left-corner)) ((background #<image 5x19> #<image 5x19>) (right-edge . -6) (top-edge . -19) (class . top-right-corner)) ((background #<image 5x16> #<image 5x16>) (left-edge . -5) (top-edge . 0) (bottom-edge . 0) (class . left-border)) ((background #<image 5x6> #<image 5x6>) (left-edge . -5) (bottom-edge . -6) (class . bottom-left-corner)) ((background #<image 6x16> #<image 6x16>) (right-edge . -6) (top-edge . 0) (bottom-edge . 0) (class . right-border)) ((background #<image 6x6> #<image 6x6>) (right-edge . -6) (bottom-edge . -6) (class . bottom-right-corner)) ((background #<image 32x6> #<image 32x6>) (left-edge . 0) (width . #<closure bottom-border-left-width>) (bottom-edge . -6) (class . bottom-border)) ((background #<image 16x6> #<image 16x6>) (left-edge . #<closure bottom-border-left-width>) (right-edge . 0) (bottom-edge . -6) (class . bottom-border)) ((background (inactive . #<image 16x16>) (focused . #<image 16x16>) (inactive-highlighted . #<image 16x16>) (highlighted . #<image 16x16>) (inactive-clicked . #<image 16x16>) (clicked . #<image 16x16>)) (foreground (inactive . #<image 12x12>) (focused . #<image 12x12>) (inactive-highlighted . #<image 12x12>) (highlighted . #<image 12x12>) (inactive-clicked . #<image 12x12>) (clicked . #<image 12x12>)) (x-justify . 2) (y-justify . 2) (left-edge . -1) (top-edge . -19) (class . close-button) (removable . t)) ((background (inactive . #<image 16x16>) (focused . #<image 16x16>) (inactive-highlighted . #<image 16x16>) (highlighted . #<image 16x16>) (inactive-clicked . #<image 16x16>) (clicked . #<image 16x16>)) (foreground (inactive . #<image 12x12>) (focused . #<image 12x12>) (inactive-highlighted . #<image 12x12>) (highlighted . #<image 12x12>) (inactive-clicked . #<image 12x12>) (clicked . #<image 12x12>)) (x-justify . 2) (y-justify . 2) (right-edge . 35) (top-edge . -19) (class . iconify-button) (removable . t)) ((background (inactive . #<image 16x16>) (focused . #<image 16x16>) (inactive-highlighted . #<image 16x16>) (highlighted . #<image 16x16>) (inactive-clicked . #<image 16x16>) (clicked . #<image 16x16>)) (foreground (inactive . #<image 12x12>) (focused . #<image 12x12>) (inactive-highlighted . #<image 12x12>) (highlighted . #<image 12x12>) (inactive-clicked . #<image 12x12>) (clicked . #<image 12x12>)) (x-justify . 2) (y-justify . 2) (right-edge . 17) (top-edge . -19) (class . maximize-button) (removable . t)) ((background (inactive . #<image 16x16>) (focused . #<image 16x16>) (inactive-highlighted . #<image 16x16>) (highlighted . #<image 16x16>) (inactive-clicked . #<image 16x16>) (clicked . #<image 16x16>)) (foreground (inactive . #<image 12x12>) (focused . #<image 12x12>) (inactive-highlighted . #<image 12x12>) (highlighted . #<image 12x12>) (inactive-clicked . #<image 12x12>) (clicked . #<image 12x12>)) (x-justify . 2) (y-justify . 2) (right-edge . -1) (top-edge . -19) (class . shade-button) (removable . t)))



(window-frame-offset my-galeon-proxywnd)
(-5 . -22)


(window-type my-galeon-proxywnd)
default



((background #<image 16x3> #<image 16x3>) (left-edge . -5) (top-edge . -22) (class . top-left-corner))

((background #<image 16x3> #<image 16x3>) (left-edge . 11) (top-edge . -22) (width . #<closure top-border-left-width>) (class . top-border))

((background #<image 16x3> #<image 16x3>) (right-edge . -6) (top-edge . -22) (class . top-right-corner))

((background #<image 6x6> #<image 6x6>) (right-edge . -6) (bottom-edge . -6) (class . bottom-right-corner))

((background #<image 16x6> #<image 16x6>) (left-edge . #<closure bottom-border-left-width>) (right-edge . 0) (bottom-edge . -6) (class . bottom-border))

((background #<image 5x6> #<image 5x6>) (left-edge . -5) (bottom-edge . -6) (class . bottom-left-corner))


default-frame-style
Crux


(window-get my-galeon-proxywnd 'current-frame-style)
Crux
nil


normal-frame
***



(window-frame my-galeon-proxywnd)
(((background #<image 16x3> #<image 16x3>) (left-edge . -5) (top-edge . -22) (class . top-left-corner)) ((background #<image 16x3> #<image 16x3>) (left-edge . 11) (top-edge . -22) (width . #<closure top-border-left-width>) (class . top-border)) ((background #<image 16x3> #<image 16x3>) (left-edge . #<closure 80cf368>) (right-edge . 10) (top-edge . -22) (class . top-border)) ((background #<image 48x19> #<image 48x19>) (left-edge . -2) (width . #<closure 80cf354>) (top-edge . -19) (text . #<subr window-name>) (foreground "grey95" "white") (x-justify . #<closure horizontal-justification>) (y-justify . #<closure vertical-justification>) (class . title)) ((background #<image 48x19> #<image 48x19>) (left-edge . #<closure 80cf340>) (top-edge . -19) (class . title)) ((background #<image 48x19> #<image 48x19>) (left-edge . #<closure title-left-width>) (right-edge . -1) (top-edge . -19) (class . title)) ((background #<image 16x3> #<image 16x3>) (right-edge . -6) (top-edge . -22) (class . top-right-corner)) ((background #<image 4x19> #<image 4x19>) (left-edge . -5) (top-edge . -19) (class . top-left-corner)) ((background #<image 5x19> #<image 5x19>) (right-edge . -6) (top-edge . -19) (class . top-right-corner)) ((background #<image 5x16> #<image 5x16>) (left-edge . -5) (top-edge . 0) (bottom-edge . 0) (class . left-border)) ((background #<image 5x6> #<image 5x6>) (left-edge . -5) (bottom-edge . -6) (class . bottom-left-corner)) ((background #<image 6x16> #<image 6x16>) (right-edge . -6) (top-edge . 0) (bottom-edge . 0) (class . right-border)) ((background #<image 6x6> #<image 6x6>) (right-edge . -6) (bottom-edge . -6) (class . bottom-right-corner)) ((background #<image 32x6> #<image 32x6>) (left-edge . 0) (width . #<closure bottom-border-left-width>) (bottom-edge . -6) (class . bottom-border)) ((background #<image 16x6> #<image 16x6>) (left-edge . #<closure bottom-border-left-width>) (right-edge . 0) (bottom-edge . -6) (class . bottom-border)) ((background (inactive . #<image 16x16>) (focused . #<image 16x16>) (inactive-highlighted . #<image 16x16>) (highlighted . #<image 16x16>) (inactive-clicked . #<image 16x16>) (clicked . #<image 16x16>)) (foreground (inactive . #<image 12x12>) (focused . #<image 12x12>) (inactive-highlighted . #<image 12x12>) (highlighted . #<image 12x12>) (inactive-clicked . #<image 12x12>) (clicked . #<image 12x12>)) (x-justify . 2) (y-justify . 2) (left-edge . -1) (top-edge . -19) (class . close-button) (removable . t)) ((background (inactive . #<image 16x16>) (focused . #<image 16x16>) (inactive-highlighted . #<image 16x16>) (highlighted . #<image 16x16>) (inactive-clicked . #<image 16x16>) (clicked . #<image 16x16>)) (foreground (inactive . #<image 12x12>) (focused . #<image 12x12>) (inactive-highlighted . #<image 12x12>) (highlighted . #<image 12x12>) (inactive-clicked . #<image 12x12>) (clicked . #<image 12x12>)) (x-justify . 2) (y-justify . 2) (right-edge . 35) (top-edge . -19) (class . iconify-button) (removable . t)) ((background (inactive . #<image 16x16>) (focused . #<image 16x16>) (inactive-highlighted . #<image 16x16>) (highlighted . #<image 16x16>) (inactive-clicked . #<image 16x16>) (clicked . #<image 16x16>)) (foreground (inactive . #<image 12x12>) (focused . #<image 12x12>) (inactive-highlighted . #<image 12x12>) (highlighted . #<image 12x12>) (inactive-clicked . #<image 12x12>) (clicked . #<image 12x12>)) (x-justify . 2) (y-justify . 2) (right-edge . 17) (top-edge . -19) (class . maximize-button) (removable . t)) ((background (inactive . #<image 16x16>) (focused . #<image 16x16>) (inactive-highlighted . #<image 16x16>) (highlighted . #<image 16x16>) (inactive-clicked . #<image 16x16>) (clicked . #<image 16x16>)) (foreground (inactive . #<image 12x12>) (focused . #<image 12x12>) (inactive-highlighted . #<image 12x12>) (highlighted . #<image 12x12>) (inactive-clicked . #<image 12x12>) (clicked . #<image 12x12>)) (x-justify . 2) (y-justify . 2) (right-edge . -1) (top-edge . -19) (class . shade-button) (removable . t)))


(mapcar (lambda (frame-part)
          (assoc 'class frame-part))
        (window-frame my-galeon-proxywnd))
((class . top-left-corner)
 (class . top-border)
 (class . top-border)
 (class . title)
 (class . title)
 (class . title)
 (class . top-right-corner)
 (class . top-left-corner)
 (class . top-right-corner)
 (class . left-border)
 (class . bottom-left-corner)
 (class . right-border)
 (class . bottom-right-corner)
 (class . bottom-border)
 (class . bottom-border)
 (class . close-button)
 (class . iconify-button)
 (class . maximize-button)
 (class . shade-button))


(remove-frame-class my-galeon-proxywnd 'iconify-button)
#<window 220061d>
(remove-frame-class my-galeon-proxywnd 'shade-button)
#<window 220061d>

apps-menu
(("Apps" . debian-apps-menu)
 ("Games" . debian-games-menu)
 ("Help" . debian-help-menu)
 ("Screen" . debian-screen-menu)
 ("WindowManagers" . debian-windowmanagers-menu)
 ("XShells" . debian-xshells-menu))


(popup-menu apps-menu)
***

(lookup-event "C-a")
(97 . 65540)


(lookup-event "C-Button1-Click1")
(1 . 131332)


(lookup-event "C-F2")
(65471 . 65540)

(50 . 65540)



(format nil "C-%d" 42)
"C-42"
"C-~i"

***



global-keymap
(keymap
 (cycle-windows 65289 . 1114112)
 (next-workspace 65363 . 1114112)
 (previous-workspace 65361 . 1114112)
 ((run-shell-command "x-terminal-emulator")
  65470 . 1114112)
 ((run-shell-command "x-terminal-emulator -e su -")
  65474 . 1114112)
 ((run-shell-command "xemacs")
  65472 . 1114112)
 ((activate-workspace 1)
  49 . 1114112)
 ((activate-workspace 2)
  50 . 1114112)
 ((activate-workspace 3)
  51 . 1114112)
 ((activate-workspace 4)
  52 . 1114112)
 ((activate-workspace 5)
  53 . 1114112)
 ((activate-workspace 6)
  54 . 1114112))



(macroexpand '(define-command 'next-workspace next-workspace #:spec "p"))
(define-command
  'next-workspace next-workspace spec "p")


(- 7)
-7


(previous-workspace -1)
nil
t



select-workspace
#<closure select-workspace>


t
nil


(select-workspace 2 t)
nil
nil
nil
***


(workspace-limits)
(0 . 5)


workspace-boundary-mode
stop

(setq workspace-boundary-mode 'wrap-around)
wrap-around


(setq my-galeon-proxywnd (car (filter (lambda (window)
                                        (= "Galeon : Settings : Proxy"
                                           (window-name window)))
                                      (managed-windows))))
#<window 340575a>


(window-get my-galeon-proxywnd 'place-mode)
nil


;; For example, doing:

;;	(add-window-matcher 'WM_CLASS "Term" '(place-mode . interactive))

;; makes all terminal windows be placed interactively. Or even better:

;;	(add-window-matcher 'WM_CLASS "Netscape/Navigator"
;;			    '(ignore-program-position . t))

;; makes netscape windows a lot easier to live with.




match-window-profile
((((WM_NAME . "^xload_tick$"))
  (position 9960 . 0)
  (frame-type . normal)
  (sticky . t)
  (window-list-skip . t)))


(setq my-slot (car match-window-profile))
(((WM_NAME . "^xload_tick$"))
 (position 9960 . 0)
 (frame-type . normal)
 (sticky . t)
 (window-list-skip . t))


(cdr my-slot)
((position 9960 . 0)
 (frame-type . normal)
 (sticky . t)
 (window-list-skip . t))


(assq 'sticky (cdr my-slot))
(sticky . t)


(let ((pair (cons 1 8)))
  (list (cons pair nil)))
(((1 . 8)))

((1 . 8))

(1 . 8)

(cons '(1 . 8) nil)

***


my-galeon-wnd
***

(list-x-properties my-galeon-proxywnd)
(_WIN_WORKSPACE WM_STATE _WIN_AREA _NET_WM_DESKTOP _WIN_STATE _NET_WM_STATE _MOTIF_WM_HINTS WM_CLASS WM_LOCALE_NAME WM_CLIENT_MACHINE WM_ICON_NAME WM_NAME WM_CLIENT_LEADER WM_HINTS WM_NORMAL_HINTS WM_PROTOCOLS)


(mapcar
 (lambda (propkey)
   `(,propkey ,(get-x-property my-galeon-proxywnd propkey)))
 (list-x-properties my-galeon-proxywnd))

;; geht nicht wg. Fehler in Emacs-Sawfish-Interaction-Mode;
;; Ausfuehren in Konsole ergibt:

((_WIN_WORKSPACE (CARDINAL 32 [0]))
 (WM_STATE (WM_STATE 32 [1 0]))
 (_WIN_AREA (CARDINAL 32 [0 0]))
 (_NET_WM_DESKTOP (CARDINAL 32 [0]))
 (_WIN_STATE (CARDINAL 32 [0]))
 (_NET_WM_STATE (ATOM 32 []))
 (_MOTIF_WM_HINTS (_MOTIF_WM_HINTS 32 [2 1082148256 101 58645 3221221096]))
 (WM_CLASS (STRING 8 "galeon-bin\000Galeon-bin\000"))
 (WM_LOCALE_NAME (STRING 8 "C"))
 (WM_CLIENT_MACHINE (STRING 8 "tack"))
 (WM_ICON_NAME (STRING 8 "Galeon : Settings : Proxy"))
 (WM_NAME (STRING 8 "Galeon : Settings : Proxy"))
 (WM_CLIENT_LEADER (WINDOW 32 [54525953]))
 (WM_HINTS (WM_HINTS 32 [67 1 1 151109728 1736459680 136126756 3221219896 1076415854 54525953]))
 (WM_NORMAL_HINTS (WM_SIZE_HINTS 32 [52 0 0 1081645521 1082148256 97 126 97 126 1082049717 4294967295 3221219008 97 0 150422876 1082148256 3221219072 151182272]))
 (WM_PROTOCOLS (ATOM 32 [WM_DELETE_WINDOW WM_TAKE_FOCUS]))
)


(select-window)
#<window 1200025>
;; Interaktiv!


(setq my-wmppp-window (select-window))
#<window 2200003>

(setq my-xload-tick-window (select-window))
#<window 2e00016>




(defun my-wnd-xprops (wnd)
  (mapcar
   (lambda (propkey)
     `(,propkey ,(get-x-property wnd propkey)))
   (list-x-properties wnd)))


(my-wnd-xprops my-xload-tick-window)
;; s.o.





(add-window-matcher 'WM_NAME "Galeon : Settings : Proxy"
                    '(place-mode . interactive)
                    


(equal "Galeon : Settings : Proxy"
       (nth 2 (get-x-property my-galeon-proxywnd 'WM_NAME)))
t

"Galeon : Settings : Proxy"

(STRING 8 "Galeon : Settings : Proxy")


(window-plist my-galeon-proxywnd)

(window-put my-galeon-proxywnd 'never-focus t)
t
(window-get my-galeon-proxywnd 'place-mode)
nil
(window-get my-galeon-proxywnd 'ignore-program-position)
nil
(window-put my-galeon-proxywnd 'ignore-program-position t)
t


(toggle-window-cycle-skip my-galeon-proxywnd)
nil
nil
nil
(toggle-window-never-focus my-galeon-proxywnd)
nil
nil
nil
nil

(toggle-task-list-skip my-galeon-proxywnd)
nil

(toggle-window-list-skip my-galeon-proxywnd)
nil

(setq my-galeon-proxywnd (select-window))
#<window 3405999>

(window-position my-galeon-proxywnd)
(1164 . 590)

(move-window-to my-galeon-proxywnd 1164 590)
#<window 3405999>

*** Remote sawfish error: (bad-arg #<subr move-window-to> 1164 1)


(defun my-add-window-handler (wnd)
  (let ((wm-name (nth 2 (get-x-property wnd 'WM_NAME))))

    (cond

     ((equal "Galeon : Settings : Proxy" wm-name)

      (move-window-to wnd 1164 590)
      (toggle-window-cycle-skip wnd)
      (toggle-window-never-focus wnd)
      (toggle-task-list-skip wnd)
      (toggle-window-list-skip wnd)
      (remove-frame-class wnd 'iconify-button)
      (remove-frame-class wnd 'shade-button))

     ((equal "wmppp" wm-name)

      (move-window-to wnd 1205  109)
      (toggle-window-cycle-skip wnd)
      (toggle-window-never-focus wnd)
      (toggle-window-sticky wnd)
      (toggle-task-list-skip wnd)
      (toggle-window-list-skip wnd)
      (remove-frame-class wnd 'iconify-button)
      (remove-frame-class wnd 'maximize-button)
      (remove-frame-class wnd 'close-button)
      (remove-frame-class wnd 'shade-button)))))


(remove-hook 'add-window-hook my-add-window-handler-dbg-wrapper)
(#<closure check-if-maximizable> #<closure update-client-state> #<closure update-client-list-hints> #<closure gnome-set-client-state> #<closure gnome-set-client-list> #<closure keymap-add-window> #<closure ws-add-window> #<closure reframe-window> #<closure stacking-add-window> #<closure shading-add-window>)


(eval 'my-add-window-handler)
#<closure my-add-window-handler>

my-add-window-handler
#<closure my-add-window-handler>

     
(setq add-window-hook (cdr add-window-hook))

(#<closure check-if-maximizable> #<closure update-client-state> #<closure update-client-list-hints> #<closure gnome-set-client-state> #<closure gnome-set-client-list> #<closure keymap-add-window> #<closure ws-add-window> #<closure reframe-window> #<closure stacking-add-window> #<closure shading-add-window> #<closure my-add-window-handler>)


(setq add-window-hook (reverse (cdr (reverse add-window-hook))))
(#<closure check-if-maximizable> #<closure update-client-state> #<closure update-client-list-hints> #<closure gnome-set-client-state> #<closure gnome-set-client-list> #<closure keymap-add-window> #<closure ws-add-window> #<closure reframe-window> #<closure stacking-add-window> #<closure shading-add-window>)



(add-hook 'add-window-hook my-add-window-handler)
(#<closure my-add-window-handler> #<closure check-if-maximizable> #<closure update-client-state> #<closure update-client-list-hints> #<closure gnome-set-client-state> #<closure gnome-set-client-list> #<closure keymap-add-window> #<closure ws-add-window> #<closure reframe-window> #<closure stacking-add-window> #<closure shading-add-window> #<closure my-add-window-handler>)


(remove-hook 'add-window-hook my-add-window-handler)
(#<closure check-if-maximizable> #<closure update-client-state> #<closure update-client-list-hints> #<closure gnome-set-client-state> #<closure gnome-set-client-list> #<closure keymap-add-window> #<closure ws-add-window> #<closure reframe-window> #<closure stacking-add-window> #<closure shading-add-window> #<closure my-add-window-handler>)

(#<closure check-if-maximizable> #<closure update-client-state> #<closure update-client-list-hints> #<closure gnome-set-client-state> #<closure gnome-set-client-list> #<closure keymap-add-window> #<closure ws-add-window> #<closure reframe-window> #<closure stacking-add-window> #<closure shading-add-window> #<closure my-add-window-handler>)

***




(shade-button (keymap . shade-button-keymap)) (maximize-button (keymap . maximize-button-keymap)) (iconify-button (keymap . iconify-button-keymap)) (close-button (keymap . close-button-keymap)) (menu-button (keymap . menu-button-keymap






(window-position my-wmppp-window)


(1205 . 109)

(1205 . 109)


(add-hook 'add-window-hook my-add-window-handler t)
(#<closure check-if-maximizable> #<closure update-client-state> #<closure update-client-list-hints> #<closure gnome-set-client-state> #<closure gnome-set-client-list> #<closure keymap-add-window> #<closure ws-add-window> #<closure reframe-window> #<closure stacking-add-window> #<closure shading-add-window> #<closure my-add-window-handler>)

(#<closure check-if-maximizable> #<closure update-client-state> #<closure update-client-list-hints> #<closure gnome-set-client-state> #<closure gnome-set-client-list> #<closure keymap-add-window> #<closure ws-add-window> #<closure reframe-window> #<closure stacking-add-window> #<closure shading-add-window> #<closure my-add-window-handler>)


my-add-window-handler
#<closure my-add-window-handler>

add-window-hook
(#<closure check-if-maximizable> #<closure update-client-state> #<closure update-client-list-hints> #<closure gnome-set-client-state> #<closure gnome-set-client-list> #<closure keymap-add-window> #<closure ws-add-window> #<closure reframe-window> #<closure stacking-add-window> #<closure shading-add-window>)



(defun my-wnd-xprops (wnd)
  (mapcar
   (lambda (propkey)
     `(,propkey ,(nth 2 (get-x-property wnd propkey))))
   (list-x-properties wnd)))


(my-wnd-xprops my-wmppp-window)

((_WIN_HINTS [6])
 (_WIN_LAYER [4])
 (WM_STATE [1 0])
 (_WIN_AREA [0 0])
 (_NET_WM_DESKTOP [4294967295])
 (_WIN_STATE [1])
 (_NET_WM_STATE [_NET_WM_STATE_STICKY _NET_WM_STATE_SKIP_PAGER _NET_WM_STATE_SKIP_TASKBAR])
 (WM_COMMAND "wmppp\000")
 (WM_HINTS [90 0 0 0 35651588 0 0 0 35651587])
 (WM_NAME "wmppp")
 (WM_CLASS "wmppp\000wmppp\000")
 (WM_NORMAL_HINTS [3 0 0 64 64 0 0 0 0 0 0 0 0 0 0 0 0 0])
)




      (raise-window-depth)
      (toggle-window-cycle-skip wnd)
      (toggle-window-never-focus wnd)
      (toggle-task-list-skip wnd)
      (toggle-window-list-skip wnd)
      (remove-frame-class wnd 'iconify-button)
      (remove-frame-class wnd 'shade-button)





(window-put (select-window) 'fixed-position t)
t
t
t

nil

(+ 1 1)
2

(window-name (select-window))
"Load file(s)"

(setq w (select-window))
#<window 260a573>

(list-x-properties w)
(_WIN_WORKSPACE WM_STATE _WIN_AREA _NET_WM_DESKTOP _WIN_STATE _NET_WM_STATE WM_CLASS WM_LOCALE_NAME WM_CLIENT_MACHINE WM_ICON_NAME WM_NAME WM_CLIENT_LEADER WM_HINTS WM_NORMAL_HINTS WM_PROTOCOLS)


(get-x-property w 'WM_NAME)
(STRING 8 "Load file(s)")

(STRING 8 "xmms Xmms ")


