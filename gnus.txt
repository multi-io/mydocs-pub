Gnus wickelt den Zugriff auf Gruppen ausschliesslich über sog. "Backends" ab. Diese kümmern sich um den phys. Zugriff auf eine bestimmte Quelle für die Nachrichten. Wichtigste Backends: `nntp' für NNTP-Server-Zugriff, `nnspool' für local spool (?). Gnus selber kennt also bspw. das NNTP-Protokoll nicht, sondern nur das Backend namens  `nntp'. Dieses übernimmt dann den Zugriff auf den Newsserver über NNTP.

Die vollständige Identifikation einer Gruppe in Gnus besteht somit aus dem Backend-Namen, dem "Server-Namen" (identifiziert irgendeine Art von Backend-spezifischem Provider, Beispiel: Hostname des Newsservers bei nntp)  und dem Gruppennamen in der Form: Backendname+Servername:Gruppenname

Beispiel:

nntp+some.where.edu:soc.motss
Gruppe `soc.motss' auf dem NNTP-Server `some.where.edu'.


Die Backends können über zugehörige Variablen konfiguriert werden. Beispiele für solche Variablen sind etwa `nntp-server-opened-hook' oder `nnspool-spool-directory'. Genaueres siehe Manual: Select Methods/Getting News/{NNTP,News Spool}.





Fragen:
Welche Mail-Backends gibt es? nnmh? nnml? AW: `nnbabyl', `nnml', `nnmh', `nnfolder' (Siehe Manual: Select Methods/Getting Mail/Choosing a Mail Backend)

nnmail Synonym für nnml? AW: Wohl nicht: nnmail-xxx heißen Variablen, die von allen Mail-Backends gleichermaßen benutzt werden (Select Methods/Getting Mail/Mail Backend Variables).

Unterschied zwischen mail-sources und mail-backends?
C-h v mail-sources : (mail sources are) "where the mail backends will look for incoming mail."



Agent-Modus von Gnus (Info-Manual Select Methods/Gnus Unplugged)
----------------------------------------------------------------
- Zum Offline-Lesen von News
- ganz am Ende von .gnus muss (gnus-agentize) stehen
- mit J j (gnus-agent-toggle-plugged) kann man gnus zwischen on-und offlinemodus umschalten
- mit J s (gnus-agent-fetch-session) kann man (im Onlinemodus) Artikel herunterladen. Anschließend kann man die Verb. trennen und Gnus mit J j davon unterrichten.
- für jede Gruppe kann man festlegen, welche Artikel aus dieser Gruppe vollständig heruntergeladen werden sollen. Gnus lädt zunächst die Headerzeilen aller verfügbaren Artikel herunter und entscheidet dann, welche Artikel vollständig (inkl. Body) geladen werden sollen. Entscheidung wird anhand von 2 Kriterien gefällt:
  - Ein Prädikat (eine Zuordnung der Menge der Headerzeilen zu einem Wahrheitswert), das für Nachrichten, die zum Download vorgemerkt werden sollen, true ergeben muss. Beispiel:
     (and short (not spam))   ==> Artikel muss kürzer als gnus-agent-short-article Zeilen sein und darf kein Spam-Artikel sein. Man kann sich auch eigene Prädikate definieren, siehe Agent Categories/Category Syntax.
  - (scoring...)

Diese Eigenschaften kann man jeder Gruppe einzeln zuweisen, und zwar über deren group parameters(1). Um z.B. obiges Prädikat einer Gruppe zuzuweisen, wird in den group parameters der Gruppe folgendes eingetragen: (agent-predicate and short (not spam))

Wenn man mehreren Gruppen die gleichen Prädikat- und Scorewerte zuweisen möchte, kann man eine _Kategorie_ anlegen. Eine Kategorie besteht aus einem Prädikats- und einem Scorewert sowie einer Liste von Gruppen, denen diese Dinge zugewiesen werden sollen.

Kategorien werden erzeugt, gelöscht und editiert im _Kategoriebuffer_. Er lässt sich vom Group-Buffer aus mit J c aktivieren.

Welche Gruppen werden durchsucht?
Gnus wendet das obige Verfahren auf alle Gruppen, deren Level kleiner oder gleich `gnus-agent-handle-level' ist, an. `gnus-agent-handle-level' ist defaultmäßig gleich `gnus-level-subscribed', d.h. es werden genau alle abonnierten Gruppen durchsucht.

Die immer vorhandene Kategorie `default' bezieht sich auf alle zu durchsuchenden Gruppen, die _nicht_ durch eine benutzerdefinierte Kategorie abgedeckt sind. Die Gruppenliste von `default' ist somit irrelevant (weil implizit vorgegeben) und bleibt deshalb i.d.R. leer.

(1) group parameters:
.....

